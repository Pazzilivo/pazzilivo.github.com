<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Pazzilivo]]></title>
  <link href="http://Pazzilivo.github.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://Pazzilivo.github.com/"/>
  <updated>2012-07-13T21:46:43+08:00</updated>
  <id>http://Pazzilivo.github.com/</id>
  <author>
    <name><![CDATA[Pazzilivo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fuck]]></title>
    <link href="http://Pazzilivo.github.com/blog/2012/07/13/fuck/"/>
    <updated>2012-07-13T16:09:00+08:00</updated>
    <id>http://Pazzilivo.github.com/blog/2012/07/13/fuck</id>
    <content type="html"><![CDATA[<h1>Dillinger</h1>

<p>Dillinger is a cloud-enabled HTML5 Markdown editor.</p>

<ul>
<li>Type some Markdown text in the left window</li>
<li>See the HTML in the right</li>
<li>Magic</li>
</ul>


<p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As [John Gruber] writes on the [Markdown site] [1]:</p>

<blockquote><p>The overriding design goal for Markdown's
formatting syntax is to make it as readable
as possible. The idea is that a
Markdown-formatted document should be
publishable as-is, as plain text, without
looking like it's been marked up with tags
or formatting instructions.</p></blockquote>

<p>This text your see here is <em>actually</em> written in Markdown! To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.</p>

<p><strong>Get started by clearing the text with the button 'Clear' in the top navigation.</strong></p>

<h2>Tech</h2>

<p>Dillinger uses a number of open source projects to work properly:</p>

<ul>
<li>[Ace Editor] - awesome web-based text editor</li>
<li>[Showdown] - a port of Markdown to JavaScript</li>
<li>[Twitter Bootstrap] - great UI boilerplate for modern web apps</li>
<li>[node.js] - evented I/O for the backend</li>
<li>[Redis] - wickedly fast key-value data store</li>
<li>[keymaster.js] - awesome keyboard handler lib by [@thomasfuchs]</li>
<li>[jQuery] - duh</li>
</ul>


<h2>Coming Soon</h2>

<p><strong>NOTE</strong>: currently the <code>app.js</code> file expects a Redis instance to be up and running and available. Dillinger currently uses Redis version <strong>2.4.4</strong>.  You will need to modify the <code>redis.conf</code> file if you are going to use an older version of Redis.</p>

<h2>Installation</h2>

<p>NOTE: currently the <code>app.js</code> file expects a Redis instance to be up and running and available.  It is used for session storage and will be used in the future.</p>

<ol>
<li>Clone the repo</li>
<li><code>cd dillinger</code></li>
<li><code>npm install -d</code> (also, if you don't have <code>smoosh</code> installed globally execute: <code>npm install smoosh -g</code>)</li>
<li><code>mkdir -p public/files</code></li>
<li><code>mkdir -p public/files/md &amp;&amp; mkdir -p public/files/html</code></li>
<li>Read the Readme file located at <code>config/README.md</code> and do what it says.</li>
<li><code>redis-server config/redis.conf</code></li>
<li><code>node build.js</code> as this will concat/compress the css and js files.</li>
<li><code>sudo node app.js</code></li>
<li><code>open http://127.0.0.1</code></li>
</ol>


<p>NOTE: Have a look at the <code>app.json</code> file as it has some configuration variables in there as well. You will definitely need to update the <code>IMAGE_PREFIX_PRODUCTION: "http://cdn.dillinger.io/"</code> to your own CDN. If you're not using a CDN, set it's path to <code>/img/</code> for that is where the images reside locally in the dillinger repo.</p>

<p><em>Free Software, Fuck Yeah!</em></p>
]]></content>
  </entry>
  
</feed>
